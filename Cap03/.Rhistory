setwd("F:/projects/R/dsa/BigDataRAzure")
getws()
getws()
getwd()
vetor_caracter = c("Data", "Science", "Academy")
vetor_caracter
vetor_numerico = c(1.90, 45.3, 300.5)
vetor_numerico
vetor_complexo = c(5.2+3i, 3.8+4i)
vetor_complexo
vetor_logico = c(TRUE, FALSE, TRUE, FALSE, FALSE)
vetor_logico
vetor_integer = c(2,4,6)
vetor_integer
# Criando vetor utilizando seq deve passar o range
vetor1 = seq(1:10) # Vetor de 1 a 10
vetor1
is.vector(vetor1)
vetor2 = rep(1:5)
vetor2
# Idexação de vetores
a <- c(1,2,3,4,5)
a
a[1]
a[6]
# Combinando vetores
v1 = c(2,3,5)
v2 = c("aa", "bb", "cc", "dd", "ee")
c(v1, v2)
# Operações com vetores
x = c(1,3,5,7)
y(2,4,6,8)
y = c(2,4,6,8)
x * y
getwd()
x * y
alfa = c(10,20,30)
beta = c(1,2,3,4,5,6,7,8,9)
alfa + beta
# Vetor nomeado
v = c("Nelson", "Mandela")
v
names(v)
names(v) = c("Nome", "Sobrenome")
v
v("Nome")
v["Nome"]
getwd()
matix (c(1,2,3,4,5,6), nr =2)
matix (c(1,2,3,4,5,6), nr =2)
matix (c(1,2,3,4,5,6), nr = 2)
matrix (c(1,2,3,4,5,6), nr = 2)
?matrix
matrix (c(1,2,3,4,5,6), nr = 3)
matrix (c(1,2,3,4,5,6), nr = 6)
matrix (c(1,2,3,4,5), nc = 2)
matrix (c(1,2,3,4,5), nc = 2)
matrix (c(1,2,3,4,5,6), nc = 2)
matrix(data = meus_dados, nr= 5, nc = 2, byrow = T)
meus_dados = c(1:10)
matrix(data = meus_dados, nr= 5, nc = 2, byrow = T)
matrix(data = meus_dados, nr= 5, nc = 2)
# Fatiando a Matriz
mat <- matrix(c(2,3,4,5), nr = 2)
mat
mat[1,2]
mat[2,2]
mat[1,3]
mat[,2]
matriz = 1:3
diag(matriz)
diag(matriz)
# Extraindo vetor de uma matriz diagonal
vetor = diag(matrix)
# Extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
vetor
diag(vetor)
# Transposta da matriz
w <- matrix(c(2,4,8,12), nr = 2, ncol = 2)
w
t(w)
U <- t(w)
solve(w)
# Multiplicação de matrizes
mat1 <- matrix(c(2,3,4,5), nr = 2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
# Multiplicando Matriz com Vetor
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr = 2)
x * y
# Nomeando a Matriz
mat3 <- matrix(c("Terra", "Marte", "Saturno", "Netuno"), nr = 2)
mat3
dinames(mat3) = (list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
dimnames(mat3) = (list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
mat3
# Identificando linhas e colunas no momento de criação da Matriz
matrix(c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
#Combinando matrizes
mat3 <- matrix(c(2,3,4,5), nr = 2)
# Nomeando a Matriz
mat3 <- matrix(c("Terra", "Marte", "Saturno", "Netuno"), nr = 2)
mat3
dimnames(mat3) = (list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
mat3
# Identificando linhas e colunas no momento de criação da Matriz
matrix(c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
#Combinando matrizes
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbind(mat4, mat5)
rbind(mat4, mat5)
# Desconstrindo matriz
c(mat4)
lista_caracter1 = list('A', 'B', 'C')
lista_caracter1
lista_caracter2 = list(c("A", "A"), "B", "C")
lista_caracter2
lista_caracter3 = list(matrix(c("A", "A", "A", "A"), nr = 2), "B", "C")
lista_caracter3
lista1 <- list(1:10, c("Zico", "Ronaldo", "Garrincha"), rnorm = 10)
lista1
lista1 <- list(1:10, c("Zico", "Ronaldo", "Garrincha"), rnorm(10))
lista1
lista1[1]
lista1[2]
lista1[2][1]
lista1[[2]][1]
lista1[[2]][1] = "Monica"
lista1
names(lista1) <- c("inteiros", "caracteres", "numéricos")
lista1
vec_num = 1:4
vec_num = 1:4
vec_char = c("A", "B", "C", "D")
lista2 = list(Numeros = vec_num, Letras = vec_char)
lista2
lista1$caracteres
length(lista1$inteiros)
length(lista1)
lista1$caracteres[1]
lista3 <- c(lista1, lista2)
lista3
texto <- "Isso é uma String"
texto
x = as.character(3.14)
x
class(x)
nome = "Nelso"; sobrenome = "Mandela"
paste(nome, sobrenome)
cat(nome, sobrenome)
# Formatando a saída
sprintf("A %s é nota %d", "Data Science Academy", 10)
# Extaindo parte da string
texto <- "Isso é uma String"
substr(texto, start = 12, stop = 17)
?substr
# Contando número de caracter
nchar(texto)
tolower("Histogramas e Elementos de Dados")
toupper("Histogramas e Elementos de Dados")
library(stringr)
?stsplit
?strsplit
# Dividindo String em caracteres
strsplit("Histogramas e Elementos de Dados")
# Dividindo String em caracteres
strsplit("Histogramas e Elementos de Dados", NULL)
strsplit("Histogramas e Elementos de Dados", " ")
# Trabalhando com String
string1 <- c("Esta é a primeira parte da minha string e será a primeira parte do meu vetor", "Aqui a minha string continua, mas será transformada no segundo vetor")
string1
string2 <- c("Precisamos testar outras strings - @???!$",
"Análise de Dados em R")
# Adicionando 3 Strings
str_c(c(string1, string2), sep = "")
# Podemos contar quantas vezes um caracter aparece no texto
str_count(string3, "s")
# Podemos contar quantas vezes um caracter aparece no texto
str_count(string2, "s")
# Localiza a primeira e ultima posicao em que o caracter aparece na string
str_locate_all(string2, "s")
# Substitui a primeira ocorrência de um caracter
str_replace(string2, "\\s", "")
str_replace_all(string2, "\\s", "")
# Detectando padrões nas strings
string1 = "17 jan 2001"
string2 = "1 jan 2001"
padrao <- "jan 20"
grepl(pattern = padrao, x = string1)
grepl(pattern = padrao, x = string2)
df = data.frame()
df
class(df)
nomes = caracter()
nomes = character()
idades = numeric()
itens = numeric()
codigos = integer
codigos = integer()
df = data.frame(c(nomes, idades, itens, codigos))
df
nome = c("Bruno", "Tiago", "Amanda", "Bianca", "Marta")
altura = c(1.88, 1.76, 1.53, 1.69, 1.68)
codigo = c(5001, 2183, 4702,7965,8890)
# Criamos um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pais = c("Portugal", "Inglaterra", "Irlanda", "Egito", "Brasil")
# Criamos um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
# Adicionamos um novo vetor a um dataframe existente
olhos = c("Verde", "Azul", "Azul", "Castanho", "Castanho")
pesq = cbind(pesquisa, olhos)
pesq
#Informações sobre o dataframe
str(pesq)
dim(pesq)
length(pesq)
#Obtendo um vetor de um dataframe
pesq$pais
# Extrair valor
pesq$[1,1]
# Extrair valor
pesq[1,1]
# Número de linhas
nrow(pesq)
# Número colunas
ncol(pesq)
head(pesq)
head(mtcars)
# Ultimos elementos
tail(mtcars)
pessq[altura < 1.60,]
pesq[altura < 1.60,]
pesq[altura < 1.60,c('codigo', 'olhos')]
pesq
# Dataframe nomeados
names(pesq) <- c("Pais", "Nome", "Altura", "Código", "Olhos")
pesq
colnames(pesq) <- c("Var1","Var2","Var3","Var4","Var5")
rownames(pesq) <- c("Obs ","Obs 2","Obs 3","Obs 4","Obs 5")
pesq
# Carregando arquivo csv
?read;read.csv
# Carregando arquivo csv
?read.csv
pacientes <- data.frame(read.csv(file = "pacientes.csv", header = TRUE, sep = ","))
pacientes <- data.frame(read.csv(file = "pacientes.csv", header = TRUE, sep = ","))
pacientes <- data.frame(read.csv(file = "pacientes.csv", header = TRUE, sep = ","))
pacientes <- data.frame(read.csv(file = "pacientes.csv", header = TRUE, sep = ","))
pacientes <- data.frame(read.csv(file = "pacientes.csv", header = TRUE, sep = ","))
getwd()
pacientes <- data.frame(read.csv(file = "pacientes.csv", header = TRUE, sep = ","))
# Visualizando o dataset
View(pacientes)
head(pacientes)
summary(pacientes)
pacientes$Diabete
hist(pacientes$Idade)
dataset_final = merge(pesq, pacientes)
dataset_final
getwd()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("F:/projects/R/dsa/BigDataRAzure")
getwd()
# Exercício 1 - Crie um vetor com 30 números inteiros
vetor1 = c(1:10)
# Exercício 1 - Crie um vetor com 30 números inteiros
vetor1 = c(1:10)
# Exercício 1 - Crie um vetor com 30 números inteiros
vetor1 = c(1:30)
vetor1
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matrix(c(1,2,3,4,5,6,7,8), nr = 4, nc = 4)
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matriz1 = matrix(c(1,2,3,4,5,6,7,8), nr = 4, nc = 4)
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
list(vetro1, matriz1)
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
list(vetor1, matriz1)
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
read.table('http://data.princeton.edu/wws509/datasets/effort.dat')
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
df = data.frame(read.table('http://data.princeton.edu/wws509/datasets/effort.dat'))
df
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
names(df) = c("config", "esfc", "chang")
df
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
df_iris = data.frame(iris)
df_iris
dim(df_iris)
summary(df_iris)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subset
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
subset(df_iris$Sepal.Length > 7)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
subset(df_iris, Sepal.Length > 7)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
subset(df_iris, Sepal.Length > 7)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
hist(x = df_iris$Sepal.Length, y = df_iris$Sepal.Width)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
library(dplyr)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
import(dplyr)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
install.packages(dplyr)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
plot(df_iris$Sepal.Length, df_iris$Petal.Length)
?slice
novp_iris <- df_iris
class(slice(novo_iris, 1:15))
?slice
novo_iris <- df_iris
class(slice(novo_iris, 1:15))
slice(novo_iris, 1:15)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
?filter
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
?filter
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
RSiteSearch(filter)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
RSiteSearch('filter')
?filter
filter(novo_iris, Sepal.Length > 6)
df_filtrado = filter(novo_iris, Sepal.Length > 6)
df_filtrado
View(df_filtrado)
getwd()
install.packages("readr")
install.packages("data.table")
install.packages("dplyr")
install.packages("ggplot2")
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(data.table)
# Usando read.csv()
# Carregando dados
# Usando read.csv()
# Carregando dados
# Usando read.csv()
system.time((df_teste1 <- read.csv("TemperaturasGlobais/TemperaturasGlobais.csv")))
# Carregando dados
# Usando read.csv()
system.time((df_teste1 <- read.csv("TemperaturasGlobais/TemperaturasGlobais.csv")))
# Carregando dados
# Usando read.csv()
system.time((df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv")))
# Carregando dados
# Usando read.csv()
system.time((df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv")))
# Usando fread()
?fread
# Carregando dados
# Usando read.csv()
system.time(df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv"))
# Usando read.table()
system.time(df_teste2 <- read.table("TemperaturasGlobais/TemperaturasGlobais.csv"))
system.time(df <- fread("TemperaturasGlobais/TemperaturasGlobais.csv"))
install.packages("readr")
library(readr)
library(dplyr)
install.packages("readr")
install.packages("data.table")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
library(readr)
library(dplyr)
library(dplyr)
library(ggplot2)
library(scales)
library(data.table)
# Carregando dados
# Usando read.csv()
system.time(df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv"))
# Carregando dados
# Usando read.csv()
system.time(df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv"))
getwd()
vec1 <- c("Macho", "Femea", "Femea", "Macho", "Macho")
vec1
fac_vec1 <- factor(vec1)
fac_vec1
class(fac_vec1)
class(vec1)
# Variáveis categóriacas ordinais
# Possuem uma ordem natural
grad <- c("Mestrado", "Doutorado", "Bacharelado", "Mestrado", "Mestrado")
grad
fac_grad <- factor(grad, order = T, levels = c("Doutorado", "Mestrado", "Bacharelado"))
fac_grad
levels(fac_grad)
summary(fac_grad)
data <- c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata =factor(data)
fdata
rdata = factor(data, labels = c("I", "II", "III"))
rdata
#Fatores não ordenados
set1 <- c("AA", "B", "BA", "CC", "CA", "AA", "BA", "CC", "CC")
set1
f.set1 <- factor(set1)
f.set1
class(f.set1)
is.ordered(f.set1)
# Fatores ordenados
o.set1 <- factor(set1, levels = c("CA", "BA", "AA", "CC", "B")
ordered = T)
# Fatores ordenados
o.set1 <- factor(set1, levels = c("CA", "BA", "AA", "CC", "B"),
ordered = T)
o.set1
is.ordered(o.set1)
as.numeric(o.set1)
table(o.set1)
# Fatores e dataframes
df = read.csv2("etnias.csv", sep = ",")
setwd("F:/projects/R/dsa/BigDataRAzure/Cap03")
# Fatores e dataframes
df = read.csv2("etnias.csv", sep = ",")
df
str(df)
levels(df$Etnia)
summary(df$Etnia)
plot(df$Idade~df$Etnia, xlab = "Etnia", ylab = "Idade", main = "Idade por Etnia")
plot(df$Idade~df$Etnia, xlab = "Etnia", ylab = "Idade", main = "Idade por Etnia")
summary(lm(Idade~Etnia, data = df))
df
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c("Solteiro", "Casado", "Divorciado"))
df
str(df)
