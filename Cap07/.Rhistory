r + r
2 + 2
3 + 3
setwd("D:/codes/R/dsa/BigDataRAzure/Cap07")
getwd()
install.packages("tidyr")
library(tidyr)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
# Dados em notas de disciplinas
dados <- data.frame(
Nome = c("Geografia", "Literatura", "Biologia"),
Regiao_A = c(97, 80, 84),
Regiao_B = c(86, 90, 91)
)
dados
dados %>%
gather(Regiao, NotaFinal, Regiao_A:Regiao_B)
?gather
df1 <- data.frame(
id = 1:4,
acao = sample(rep(c("controle", "tratamento"), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
df2
df1
# Reshape 1
df1_organizado <- df1 %>%
gather(key, time, -id, -acao)
head(df1_organizado, 8)
# Reshape 2
df1_organizado2 <- df1_organizado %>%
separete(key, into = c("localidade", "tempo"), sep = "\\.")
# Reshape 2
df1_organizado2 <- df1_organizado %>%
separate(key, into = c("localidade", "tempo"), sep = "\\.")
df1_organizado2
df3 <- data.frame(
participante = c("p1", "p2", "p3", "p4", "p5", "p6"),
info = c("g1m", "g1m", "g1f", "g2m", "g2m", "g2m"),
day1score = rnorm(n = 6, mean = 80, sd = 15),
day2score = rnorm(n = 6, mean = 88, sd = 8)
)
print(df2)
print(df3)
# Reshape dos dados
df3 %>%
gather(day, score, c(day1score, day2score))
df3 %>%
gather(day, score, c(day1score, day2score)) %>%
spread(day, score)
df3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c("group", "gender"), sep = 2)
df3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c("group", "gender"), sep = 2) %>%
unite(infoAgain, group, gender)
df3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c("group", "gender"), sep = 2) %>%
ggplot(aes(x = day, y = score)) +
geom_point() +
facet_wrap(~ group) +
geom_smooth(method = "lm", aes(group = 1), se = F)
setwd("D:/codes/R/dsa/BigDataRAzure/Cap07")
getwd()
head(iris)
str(iris)
library(lattice)
?lattice
mtcars
t(matcars)
t(mtcars)
# Distribuindo valores verticalmente (long)
iris_modif <- reshape(iris,
varying = list(c(1,3), c(2,4)),
v.names = c("Comprimento", "Largura"),
timevar = "Parte",
times = c("Speal", "Petal"),
idvar = "ID",
direction = "long")
iris_modif
View(iris_modif)
# Distribuindo valores verticalmente (long)
iris_modif <- reshape(iris,
varying = 1:4,
v.names = "Medidas",
timevar = "Dimensoes",
times = names(iris)[1:4],
idvar = "ID",
direction = "long")
View(iris_modif)
View(iris)
bwplot(Medidas ~ Species | Dimensoes, data = iris_modif)
iris_modif_sp <- reshape(iris,
varying = list(c(1,3), c(2,4)),
v.names = c("Comprimento", "Largura"),
timevar = "Parte",
times = c("Speal", "Petal"),
idvar = "ID",
direction = "long")
View(iris_modif_sp)
xyplot(Comprimento ~ Largura | Species, groups = Parte,
data = iris_modif_sp, auto.key = list(space="Right"))
xyplot(Comprimento ~ Largura | Parte, groups = Species,
data = iris_modif_sp, auto.key = list(space="Right"))
# Reshape2
install.packages("reshape2")
library(reshape2)
# Criando um dataframe
df = data.frame(nome = c("Zico", "Pele"),
chuteira = c(40, 42),
idade = c(34,NA),
peso = c(93, NA),
altura = c(175, 178))
df
df
# Criando um dataframe
df = data.frame(nome = c("Zico", "Pele"),
chuteira = c(40, 42),
idade = c(34,NA),
peso = c(93, NA),
altura = c(175, 178))
df
# "Derretendo" o dataframe - Função metl()
df_wide = melt(df, id = c("nome", "chuteira"))
df_wide
# Removendo NA
df_wide = melt(df, id = c("nome", "chuteira"), na.rm = TRUE)
df_wide
df_wide
df_wide
# "Esticando" o dataframe
dcast(df_wide, formula = chuteira + nome ~ variable)
dcast(df_wide, formula = nome + chuteira  ~ variable)
dcast(df_wide, formula = nome  ~ variable)
dcast(df_wide, formula = ...  ~ variable)
# Aplicando o reshape2
names(airquality) <- tolower(names(airquality))
head(airq)
head(airquality)
dim(airquality)
# Função melt() - wide
?melt
df_wide <- melt(airquality)
class(df_wide)
head(df_wide)
dim(airquality)
tail(airquality)
tail(df_wide) # visuali
dim(df_wide)
# Inserindo mais duas variáveis
df_wide <- melt(airquality, id.vars = c("month", "day"))
head(df_wide)
df_wide <- melt(airquality, id.vars = c("month", "day"),
variable.name = "climate_variable",
value.name = "climate_value")
head(df_wide)
# Função dcast() - long
df_wide <- melt(airquality, id.vars = c("month", "day"))
View(df_wide)
df_long <- dcast(df_wide, month + day ~ variable)
View(df_long)
head(airquality)
setwd("D:/codes/R/dsa/BigDataRAzure/Cap07")
getwd()
install.packages("plyr")
install.packages("plyr")
install.packages("gapminder")
library(plyr)
library(gapminder)
?gapminder
?ddply
df <- ddply(gapminder, ~ continent,
summarise,
max_le = max(lifeExp))
df
View(df)
df2 <- ddply(gapminder, ~ continent,
summarise,
n_uniq_countries = length(unique(country)))
df2
View(df2)
ddply(gapminder, ~ continent,
function(x) c(n_uniq_countries = length(unique(x$country))))
ddply(gapminder, ~ continent,
summarize,
min = min(lifeExp),
max = max(lifeExp),
median = median(gdpPercap))
# Usando um dataset do ggplot
library(ggplot2)
data(mpg)
str(mpg)
?mpg
str(data)
# Trabalhando com um subset do dataset
data <- mpg[1,7:9]
str(data)
# Trabalhando com um subset do dataset
data <- mpg[,c(1,7:9)]
str(data)
View(data)
# Sumarizando e agregando os dados
ddply(data, .(manufacturer),
summarise,
avgcty = mean(cty))
# Várias funções em uma única chamada
ddply(data, .(manufacturer),
summarize,
avgcty = mean(cty),
sdcty = sd(cty),
maxhwy = max(hwy))
# Sumarizando os dados pela combinação de variáveis/fatores
ddply(data, .(manufacturer, drv),
summarize,
avgcty = mean(cty),
sdcty = sd(cty),
maxhwy = max(hwy))
